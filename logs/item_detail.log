2020-03-09 19:55:40,796 - [test_add.py-->line:72] - INFO: 用例:加标成功, 执行通过
2020-03-09 19:55:41,045 - [test_add.py-->line:72] - INFO: 用例:加标失败—借款人id为空, 执行通过
2020-03-09 19:55:41,289 - [test_add.py-->line:72] - INFO: 用例:加标失败—标题为空, 执行通过
2020-03-09 19:55:41,532 - [test_add.py-->line:72] - INFO: 用例:加标失败—借款金额为空, 执行通过
2020-03-09 19:55:41,773 - [test_add.py-->line:72] - INFO: 用例:加标失败—年利率为空, 执行通过
2020-03-09 19:55:42,004 - [test_add.py-->line:72] - INFO: 用例:加标失败—借款期限为空, 执行通过
2020-03-09 19:55:42,255 - [test_add.py-->line:72] - INFO: 用例:加标失败—借款期限类型为空, 执行通过
2020-03-09 19:55:42,502 - [test_add.py-->line:72] - INFO: 用例:加标失败—竞标天数为空, 执行通过
2020-03-09 19:55:42,720 - [test_add.py-->line:72] - INFO: 用例:加标失败—借款人id不是当前登录用户, 执行通过
2020-03-09 19:55:42,959 - [test_add.py-->line:72] - INFO: 用例:加标失败—借款金额为负数, 执行通过
2020-03-09 19:55:43,191 - [test_add.py-->line:72] - INFO: 用例:加标失败—借款金额为小数, 执行通过
2020-03-09 19:55:43,606 - [test_audit.py-->line:104] - INFO: 用例:审核通过, 执行通过
2020-03-09 19:55:43,950 - [test_audit.py-->line:104] - INFO: 用例:审核不通过, 执行通过
2020-03-09 19:55:44,563 - [test_audit.py-->line:104] - INFO: 用例:项目不待审核状态, 执行通过
2020-03-09 19:55:44,854 - [test_audit.py-->line:104] - INFO: 用例:参数approved_or_not为空, 执行通过
2020-03-09 19:55:45,135 - [test_audit.py-->line:104] - INFO: 用例:项目id为空, 执行通过
2020-03-09 19:55:45,422 - [test_audit.py-->line:104] - INFO: 用例:项目id不存在, 执行通过
2020-03-09 19:55:45,763 - [test_info.py-->line:76] - INFO: 用例:正常获取用户信息, 执行通过
2020-03-09 19:55:46,018 - [test_info.py-->line:76] - INFO: 用例:不存在的用户id, 执行通过
2020-03-09 19:55:46,338 - [test_invest.py-->line:75] - INFO: 用例:管理员正常登录, 执行通过
2020-03-09 19:55:46,592 - [test_invest.py-->line:75] - INFO: 用例:管理员加标, 执行通过
2020-03-09 19:55:46,889 - [test_invest.py-->line:75] - INFO: 用例:管理员审核, 执行通过
2020-03-09 19:55:47,141 - [test_invest.py-->line:75] - INFO: 用例:投资人正常登录, 执行通过
2020-03-09 19:55:47,419 - [test_invest.py-->line:75] - INFO: 用例:投资人正常投资, 执行通过
2020-03-09 19:55:47,732 - [test_invest.py-->line:75] - INFO: 用例:投资人id为空, 执行通过
2020-03-09 19:55:47,979 - [test_invest.py-->line:75] - INFO: 用例:标id为空, 执行通过
2020-03-09 19:55:48,243 - [test_invest.py-->line:75] - INFO: 用例:投资金额为空, 执行通过
2020-03-09 19:55:48,490 - [test_invest.py-->line:75] - INFO: 用例:投资金额大于项目可投金额, 执行通过
2020-03-09 19:55:48,778 - [test_invest.py-->line:75] - INFO: 用例:投资金额等于项目可投金额, 执行通过
2020-03-09 19:55:49,060 - [test_invest_two.py-->line:125] - INFO: 用例：管理员正常登录，执行通过
2020-03-09 19:55:49,333 - [test_invest_two.py-->line:125] - INFO: 用例：管理员加标，执行通过
2020-03-09 19:55:49,564 - [test_invest_two.py-->line:125] - INFO: 用例：管理员审核，执行通过
2020-03-09 19:55:49,824 - [test_invest_two.py-->line:125] - INFO: 用例：投资人正常登录，执行通过
2020-03-09 19:55:50,715 - [test_invest_two.py-->line:125] - INFO: 用例：投资人正常投资，执行通过
2020-03-09 19:55:50,915 - [test_invest_two.py-->line:125] - INFO: 用例：投资人id为空，执行通过
2020-03-09 19:55:51,181 - [test_invest_two.py-->line:125] - INFO: 用例：标id为空，执行通过
2020-03-09 19:55:51,398 - [test_invest_two.py-->line:125] - INFO: 用例：投资金额为空，执行通过
2020-03-09 19:55:51,614 - [test_invest_two.py-->line:125] - INFO: 用例：投资金额大于项目可投金额，执行通过
2020-03-09 19:55:52,371 - [test_invest_two.py-->line:125] - INFO: 用例：投资金额等于项目可投金额，执行通过
2020-03-09 19:55:52,648 - [test_login.py-->line:55] - INFO: 用例:登录成功, 执行通过
2020-03-09 19:55:52,864 - [test_login.py-->line:50] - ERROR: 用例:手机号为空, 执行未通过
2020-03-09 19:55:52,864 - [test_login.py-->line:51] - ERROR: 1 != 2
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_login.py", line 44, in test_login
    self.assertEqual(expected["code"], res["code"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 822, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-03-09 19:55:53,200 - [test_login.py-->line:50] - ERROR: 用例:密码为空, 执行未通过
2020-03-09 19:55:53,200 - [test_login.py-->line:51] - ERROR: 1 != 2
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_login.py", line 44, in test_login
    self.assertEqual(expected["code"], res["code"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 822, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-03-09 19:55:53,468 - [test_login.py-->line:55] - INFO: 用例:手机号未注册, 执行通过
2020-03-09 19:55:53,732 - [test_login.py-->line:55] - INFO: 用例:密码错误, 执行通过
2020-03-09 19:55:53,949 - [test_login.py-->line:55] - INFO: 用例:手机号格式错误, 执行通过
2020-03-09 19:55:54,685 - [test_recharge.py-->line:100] - INFO: 用例:充值成功-整数, 执行通过
2020-03-09 19:55:55,073 - [test_recharge.py-->line:100] - INFO: 用例:充值成功-1位小数, 执行通过
2020-03-09 19:55:55,449 - [test_recharge.py-->line:100] - INFO: 用例:充值成功-2位小数, 执行通过
2020-03-09 19:55:55,819 - [test_recharge.py-->line:100] - INFO: 用例:充值成功-50万, 执行通过
2020-03-09 19:55:56,030 - [test_recharge.py-->line:100] - INFO: 用例:会员id为空, 执行通过
2020-03-09 19:55:56,246 - [test_recharge.py-->line:100] - INFO: 用例:id不是当前登录的用户, 执行通过
2020-03-09 19:55:56,481 - [test_recharge.py-->line:95] - ERROR: 用例:会员id为字符串, 执行未通过
2020-03-09 19:55:56,481 - [test_recharge.py-->line:96] - ERROR: 2 != 0
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected["code"], res["code"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 822, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-03-09 19:55:56,723 - [test_recharge.py-->line:100] - INFO: 用例:会员id为小数, 执行通过
2020-03-09 19:55:56,964 - [test_recharge.py-->line:95] - ERROR: 用例:充值金额为0, 执行未通过
2020-03-09 19:55:56,965 - [test_recharge.py-->line:96] - ERROR: 2 != 0
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected["code"], res["code"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 822, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-03-09 19:55:57,198 - [test_recharge.py-->line:95] - ERROR: 用例:充值金额为负数, 执行未通过
2020-03-09 19:55:57,198 - [test_recharge.py-->line:96] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_recharge.py", line 82, in test_recharge
    self.assertEqual(expected["msg"], res["msg"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 1203, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Python\lib\unittest\case.py", line 670, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-03-09 19:55:57,483 - [test_recharge.py-->line:95] - ERROR: 用例:充值金额为空, 执行未通过
2020-03-09 19:55:57,484 - [test_recharge.py-->line:96] - ERROR: 1 != 2
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected["code"], res["code"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 822, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-03-09 19:55:57,746 - [test_recharge.py-->line:95] - ERROR: 用例:充值金额-3位小数, 执行未通过
2020-03-09 19:55:57,746 - [test_recharge.py-->line:96] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_recharge.py", line 82, in test_recharge
    self.assertEqual(expected["msg"], res["msg"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 1203, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Python\lib\unittest\case.py", line 670, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-03-09 19:55:57,969 - [test_recharge.py-->line:95] - ERROR: 用例:充值金额-大于50万, 执行未通过
2020-03-09 19:55:57,969 - [test_recharge.py-->line:96] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_recharge.py", line 82, in test_recharge
    self.assertEqual(expected["msg"], res["msg"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 1203, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Python\lib\unittest\case.py", line 670, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-03-09 19:55:58,184 - [test_recharge.py-->line:100] - INFO: 用例:充值金额-非数字, 执行通过
2020-03-09 19:55:58,528 - [test_register.py-->line:70] - INFO: 用例:注册成功-带注册名, 执行通过
2020-03-09 19:55:58,841 - [test_register.py-->line:70] - INFO: 用例:成功-不带用户名, 执行通过
2020-03-09 19:55:59,050 - [test_register.py-->line:70] - INFO: 用例:不输入手机号, 执行通过
2020-03-09 19:55:59,268 - [test_register.py-->line:70] - INFO: 用例:手机号长度10位, 执行通过
2020-03-09 19:55:59,495 - [test_register.py-->line:70] - INFO: 用例:手机号长度12位, 执行通过
2020-03-09 19:55:59,710 - [test_register.py-->line:70] - INFO: 用例:手机号含有非法字符, 执行通过
2020-03-09 19:55:59,944 - [test_register.py-->line:70] - INFO: 用例:已注册过的手机号, 执行通过
2020-03-09 19:56:00,158 - [test_register.py-->line:70] - INFO: 用例:密码7位, 执行通过
2020-03-09 19:56:00,411 - [test_register.py-->line:70] - INFO: 用例:密码17位, 执行通过
2020-03-09 19:56:00,627 - [test_register.py-->line:70] - INFO: 用例:不输入密码, 执行通过
2020-03-09 19:56:00,846 - [test_register.py-->line:70] - INFO: 用例:注册名11位, 执行通过
2020-03-09 19:56:01,058 - [test_register.py-->line:70] - INFO: 用例:类型输入非0，1内容, 执行通过
2020-03-09 19:56:01,347 - [test_register.py-->line:70] - INFO: 用例:不输入类型, 执行通过
2020-03-09 19:56:01,611 - [test_withdraw.py-->line:86] - INFO: 用例:登录成功, 执行通过
2020-03-09 19:56:01,999 - [test_withdraw.py-->line:86] - INFO: 用例:提现成功-整数, 执行通过
2020-03-09 19:56:02,368 - [test_withdraw.py-->line:86] - INFO: 用例:提现成功-1位小数, 执行通过
2020-03-09 19:56:02,728 - [test_withdraw.py-->line:86] - INFO: 用例:提现成功-2位小数, 执行通过
2020-03-09 19:56:03,103 - [test_withdraw.py-->line:86] - INFO: 用例:提现成功-50万, 执行通过
2020-03-09 19:56:03,317 - [test_withdraw.py-->line:86] - INFO: 用例:会员id为空, 执行通过
2020-03-09 19:56:03,564 - [test_withdraw.py-->line:86] - INFO: 用例:会员id不存在, 执行通过
2020-03-09 19:56:03,806 - [test_withdraw.py-->line:81] - ERROR: 用例:会员id为字符串, 执行未通过
2020-03-09 19:56:03,806 - [test_withdraw.py-->line:82] - ERROR: 2 != 0
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_withdraw.py", line 68, in test_withdraw
    self.assertEqual(expected["code"], res["code"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 822, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-03-09 19:56:04,028 - [test_withdraw.py-->line:86] - INFO: 用例:会员id为小数, 执行通过
2020-03-09 19:56:04,240 - [test_withdraw.py-->line:81] - ERROR: 用例:提现金额为0, 执行未通过
2020-03-09 19:56:04,241 - [test_withdraw.py-->line:82] - ERROR: 2 != 0
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_withdraw.py", line 68, in test_withdraw
    self.assertEqual(expected["code"], res["code"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 822, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-03-09 19:56:04,482 - [test_withdraw.py-->line:81] - ERROR: 用例:提现金额为负数, 执行未通过
2020-03-09 19:56:04,483 - [test_withdraw.py-->line:82] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_withdraw.py", line 69, in test_withdraw
    self.assertEqual(expected["msg"], res["msg"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 1203, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Python\lib\unittest\case.py", line 670, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-03-09 19:56:04,702 - [test_withdraw.py-->line:81] - ERROR: 用例:提现金额为空, 执行未通过
2020-03-09 19:56:04,702 - [test_withdraw.py-->line:82] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_withdraw.py", line 69, in test_withdraw
    self.assertEqual(expected["msg"], res["msg"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 1203, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Python\lib\unittest\case.py", line 670, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-03-09 19:56:04,928 - [test_withdraw.py-->line:81] - ERROR: 用例:提现金额-3位小数, 执行未通过
2020-03-09 19:56:04,928 - [test_withdraw.py-->line:82] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_withdraw.py", line 69, in test_withdraw
    self.assertEqual(expected["msg"], res["msg"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 1203, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Python\lib\unittest\case.py", line 670, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-03-09 19:56:05,156 - [test_withdraw.py-->line:81] - ERROR: 用例:提现金额-大于50万, 执行未通过
2020-03-09 19:56:05,157 - [test_withdraw.py-->line:82] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "D:\Git\api_test\testcases\test_withdraw.py", line 69, in test_withdraw
    self.assertEqual(expected["msg"], res["msg"])
  File "D:\Python\lib\unittest\case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\Python\lib\unittest\case.py", line 1203, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\Python\lib\unittest\case.py", line 670, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-03-09 19:56:05,383 - [test_withdraw.py-->line:86] - INFO: 用例:提现金额-非数字, 执行通过
